package google;

import java.util.*;

public class DijsktraShortestPath {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][] graph = new int[][]{{0, 4, 0, 0, 0, 0, 0, 8, 0},
            {4, 0, 8, 0, 0, 0, 0, 11, 0},
            {0, 8, 0, 7, 0, 4, 0, 0, 2},
            {0, 0, 7, 0, 9, 14, 0, 0, 0},
            {0, 0, 0, 9, 0, 10, 0, 0, 0},
            {0, 0, 4, 14, 10, 0, 2, 0, 0},
            {0, 0, 0, 0, 0, 2, 0, 1, 6},
            {8, 11, 0, 0, 0, 0, 1, 0, 7},
            {0, 0, 2, 0, 0, 0, 6, 7, 0}
           };
           
           int[] res = dijsktra(graph, 0);
           
           for (int i = 0; i < res.length; i++) {
        	   System.out.println("From 0 to " + i + ", shortest dist: " + res[i]);
           }
	}
	
	
	public static int[] dijsktra(int[][] graph, int start) {
		int[] visited = new int[graph.length];
        int[] dist = new int[graph.length];
        for (int i = 0; i < dist.length; i++) {
     	   dist[i] = Integer.MAX_VALUE;
        }
        
        dist[start] = 0;
        
        for (int c = 0; c < graph.length - 1; c++) {
        	
        	int i = findMin(dist, visited);
        	visited[i] = 1;
        	
        	for (int j = 0; j < graph[0].length; j++) {
        		if (visited[j] != 1 && dist[j] != Integer.MAX_VALUE &&
        				graph[i][j] != 0 && dist[i] + graph[i][j] < dist[j]) {
        			dist[j] = dist[i] + graph[i][j];
        		}
        	}
        }
        
		return dist;
	}
	
	public static int findMin(int[] dist, int[] visited) {
		int min = Integer.MAX_VALUE;
		int minIdx = -1;
		
		for (int i = 0; i < dist.length; i++) {
			if (visited[i] != 1 && dist[i] <= min) {
				min = dist[i];
				minIdx = i;
			}
		}
		
		return minIdx;
	}

}
